name: build and release electron from react web

on:
  push:
    tags:
      - 'v*' # any push with a tag in semver format
    
jobs:
  build:
    # Job name is build-electron-from-react-web
    name: build-electron-from-react-web
    # This job runs on Linux
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
    steps:
      - name: echo Starting
        run: echo The time is `date`
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Use node
        uses: actions/setup-node@v1
      - name: Show home
        run: echo Home is $HOME and PWD is $GITHUB_WORKSPACE
      - name: Show repo after checkout
        run: ls
      - name: Run yarn to retrieve dependencies
        run: yarn
      - name: Yarn - add capacitor
        run: yarn add @capacitor/core @capacitor/cli
      - name: Initialize capacitor
        run: npx cap init --web-dir "build" "book-package-app" "org.unfoldingword.BookPackageApp"
      - name: Yarn - build
        run: yarn build
      - name: npx cap add electron
        run: npx cap add electron
      - name: show repo after add electron
        run: ls 
      - name: fix electron package.json 
        run: |
          cp ./public/electron-package.json ./electron/package.json
          cp ./public/android-chrome-512x512.png ./electron/splash_assets/splash.png
      - name: fix electron index.html
        run: sed -e "s#/book-package-app/#./#g" < index.html > x && mv x index.html
        working-directory: ./electron/app
        shell: bash
      - name: copy index.js to app
        run: cp index.js app
        working-directory: ./electron
        shell: bash
      - name: add electron and electron-builder
        run: |
          yarn add electron
          yarn add electron-builder 
        working-directory: ./electron
      - name: Find electron-builder
        run: |
          find . -name electron-builder
          pwd
          ls -al ./electron/node_modules/.bin/elect*
        shell: bash
      - name: run electron-builder
        run: $GITHUB_WORKSPACE/$PKG/electron-builder
        working-directory: ./electron
        shell: bash
        env:
          PKG: electron/node_modules/.bin
      - name: show platforms
        run: ls ./dist
        working-directory: ./electron
        shell: bash
      
      # at this point, we have the asset... let's proceed to create the release 
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: true # set to false in order to publish automatically
          prerelease: true # set to false normally, unless you use a beta process

      # with the release created, let's upload the windows asset
      # Note that the version string used is in the package.json
      # used by electron (not! the one used by BPA itself).
      # Edit version in copy at ./public/electron-package.json
      - name: Upload Windows Release Asset
        if: matrix.os == 'windows-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: "./electron/dist/book-package-app Setup 1.0.0.exe"
          asset_name: BPA-Windows
          asset_content_type: application/octet-stream

      - name: Upload Ubuntu Release Asset
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} 
          asset_path: "book-package-app_1.0.0_amd64.deb"
          asset_name: BPA-Windows
          asset_content_type: application/octet-stream

      - name: Done!
        run: echo The time is `date`
