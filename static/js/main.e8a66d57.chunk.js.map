{"version":3,"sources":["core/books.ts","core/optimize.tsx","core/csvMaker.ts","core/exportBookPackage.ts","core/export.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["newTestament","list","i","data","length","testament","push","title","oldTestament","titlesToBoolean","ob","bookDataTitles","forEach","v","k","bookIdByTitle","id","bookTitleById","resourcePrefixes","convertUtaToLink","lnk","convertUtwToLink","replace","path","optimize","state","setOpt","a","CircularProgress","allbooks","Object","keys","bookpkg","filter","book","console","log","booksDone","booksOpt","includes","bookCountTotalsPreOpt","Map","bookCountArticleTotalsPreOpt","bklist","bk","bkid","books","res","dbkey","dbsetup","getItem","undefined","rescount","total","grandTotalWordCount","has","set","get","doneGrandTotal","doneArticleMap","dam","detail_article_map","articles","j","articleCount","values","c","resourceTotal","round","optBooks","optCounts","optUtaMap","optUtwMap","refmapUta","refmapUtw","n","newBooks","newCounts","optArticleMap","optBookTotal","roundWinnerBook","roundWinnerCount","summary_ref_map","optUta","optUtw","Typography","map","t","key","toLocaleString","TreeView","defaultCollapseIcon","defaultExpandIcon","TreeItem","nodeId","label","uta","Link","href","target","rel","utw","addRow","csvdata","csvrow","cell","toCSV","join","exportBookPackage","bookCountTotals","bookCountArticleTotals","csv","row","entries","sufkey","dedupList","Set","csvDownload","exportCounts","ult","ust","utn","utq","download","filename","text","element","document","createElement","setAttribute","encodeURIComponent","style","display","body","appendChild","click","removeChild","useStyles","makeStyles","theme","createStyles","root","width","flexGrow","menuButton","marginRight","spacing","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","marginLeft","easeOut","enteringScreen","formControl","margin","button","instructions","marginTop","marginBottom","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","mixins","toolbar","justifyContent","content","contentShift","alignItemsAndJustifyContent","offset","GreenCheckbox","withStyles","color","green","checked","props","Checkbox","joinBookIds","x","y","queryProcessedOnce","App","React","useState","setState","activeStep","setActiveStep","skipped","setSkipped","steps","isStepSkipped","step","handleNext","newSkipped","delete","prevActiveStep","query","search","window","location","URLSearchParams","useQuery","bks","barrayIds","split","barrayTitles","alert","name","b","clear","classes","useTheme","anchorEl","setAnchorEl","popen","Boolean","open","setOpen","ts","Date","toISOString","copyToClipboard","str","el","value","position","left","select","execCommand","event","states","ids","origin","pathname","url","startsWith","defBase","currentTarget","exp","clearFlag","clearF","setClearF","handleChange","handleFinishedChange","_opt","useEffect","opt","message","fetchData","className","CssBaseline","AppBar","clsx","Toolbar","IconButton","aria-label","onClick","edge","variant","Drawer","anchor","paper","direction","Divider","FormGroup","FormControlLabel","control","Switch","onChange","handleChangeClearFlag","Button","disabled","aria-describedby","Popover","onClose","anchorOrigin","vertical","horizontal","transformOrigin","Paper","Stepper","index","stepProps","labelProps","completed","Step","StepLabel","Container","getStepContent","Grid","container","item","xs","FormControl","required","component","FormLabel","FormHelperText","bookId","chapter","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e8a66d57.chunk.js","sourcesContent":["import data from './books.json';\r\nimport * as opt from './optimize'\r\n\r\nexport interface bookDataIF {\r\n  \"id\": string;\r\n  \"title\": string;\r\n  \"usfm\": string;\r\n  \"testament\": string;\r\n  \"verseCount\": number;\r\n  \"chapters\": number[];\r\n}\r\n\r\nexport const chaptersInBook = (bookId: string) => {\r\n    let chapters: number[];\r\n    chapters = bookData(bookId).chapters;\r\n    if ( chapters === undefined ) {\r\n      throw new Error(\"Error: chaptersInBook(): Invalid bookId\");\r\n    }\r\n    return chapters;\r\n};\r\n\r\nexport const versesInChapter = (bookId: string, chapter: number) => {\r\n  const verses = chaptersInBook(bookId)[chapter - 1];\r\n  return verses;\r\n};\r\n\r\nexport const bookData = (bookId: string) => {\r\n  const _bookData: bookDataIF = data.filter(row => row.id === bookId)[0];\r\n  return _bookData;\r\n};\r\n\r\nexport const testament = (bookId: string) => {\r\n  const _testament = bookData(bookId).testament;\r\n  return _testament;\r\n};\r\n\r\nexport const newTestament = () => {\r\n  let list: string[] = [];\r\n  for (let i=0; i < data.length; i++) {\r\n    if ( data[i].testament === \"new\" ) {\r\n      list.push( data[i].title )\r\n    }\r\n  }\r\n  return list;\r\n}\r\n\r\nexport const oldTestament = () => {\r\n  let list: string[] = [];\r\n  for (let i=0; i < data.length; i++) {\r\n    if ( data[i].testament === \"old\" ) {\r\n      list.push( data[i].title )\r\n    }\r\n  }\r\n  return list;\r\n}\r\n\r\nexport const bookDataTitles = () => {\r\n  let list: string[] = [];\r\n  for (let i=0; i < data.length; i++) {\r\n      list.push( data[i].title )\r\n  }\r\n  // add OBS as a pseudobook\r\n  list.push('Open Bible Stories');\r\n  return list;\r\n}\r\n\r\nexport const titlesToBoolean = () => {\r\n  let ob: opt.bpStateIF = {};\r\n  let list = bookDataTitles();\r\n  list.forEach((v,k) => {ob[v]= [false,false]});\r\n  return ob;\r\n}\r\n\r\nexport const bookIdByTitle = (title: string) => {\r\n  if ( title === 'Open Bible Stories' ) return 'obs';\r\n  for (let i=0; i < data.length; i++) {\r\n    if ( data[i].title === title ) {\r\n      return data[i].id;\r\n    }\r\n  }\r\n  return \"\";\r\n}\r\n\r\nexport const bookTitleById = (id: string) => {\r\n  for (let i=0; i < data.length; i++) {\r\n    if ( data[i].id === id ) {\r\n      return data[i].title;\r\n    }\r\n  }\r\n  return \"\";\r\n}","import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TreeView from '@material-ui/lab/TreeView';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport TreeItem from '@material-ui/lab/TreeItem';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { Link } from '@material-ui/core';\r\n\r\nimport * as dbsetup from 'book-package-rcl';\r\nimport * as books from './books';\r\n\r\nexport interface bpStateIF { [x: string]: boolean[]; };\r\ninterface ObjectLiteral {\r\n    [key: string]: any;\r\n} \r\n\r\n  \r\nconst resourcePrefixes = ['uta-', 'utw-', 'ult-','ust-', 'utq-', 'utn-']\r\n\r\nfunction convertUtaToLink(lnk: string) {\r\n    const path = 'https://git.door43.org/unfoldingWord/en_ta/src/branch/master/translate/';\r\n    return path+lnk;\r\n}\r\n\r\nexport function convertUtwToLink(lnk: string) {\r\n    const path = 'https://git.door43.org/unfoldingWord/en_tw/src/branch/master';\r\n    let s;\r\n    s = lnk;\r\n    s = s.replace(/^rc.*dict(\\/.*$)/, path+'$1.md');\r\n    return s;\r\n}\r\n\r\n\r\nexport async function optimize(state: bpStateIF, setOpt: React.Dispatch<React.SetStateAction<JSX.Element>> ) {\r\n\r\n    setOpt(<CircularProgress/>);\r\n    // extract the books in the package\r\n    const allbooks = Object.keys(state);\r\n    // extract the book package\r\n    const bookpkg    = allbooks.filter( function(book) { return state[book][0] } );\r\n    console.log(\"bookpkg:\",bookpkg);\r\n    // extract the books that are done/completed first (if any)\r\n    const booksDone  = bookpkg.filter( function(book) { return state[book][1] } );\r\n    console.log(\"booksDone:\",booksDone);\r\n    // books to be optimized\r\n    const booksOpt   = bookpkg.filter( function(book) { return !booksDone.includes(book) } );\r\n    console.log(\"booksOpt:\",booksOpt);\r\n\r\n    // count words in each book for pre-optimization summary\r\n    let bookCountTotalsPreOpt = new Map<string,number>();\r\n    let bookCountArticleTotalsPreOpt = new Map<string,number>();\r\n    let bklist: string[] = [];\r\n    for (let bk of bookpkg) {\r\n        let bkid = books.bookIdByTitle(bk);\r\n        bklist.push(bkid);\r\n        for (let res of resourcePrefixes) {\r\n            if ( bkid === 'obs' ) {\r\n                if (res === 'uta-' || res === 'ult-' || res === 'ust-' ) {\r\n                    continue; // these resources are not present for OBS\r\n                }\r\n            }\r\n            let dbkey = res+bkid;\r\n            let data = await dbsetup.bpstore.getItem(dbkey);\r\n            let rescount = data.total;\r\n            if ( rescount === undefined ) {\r\n                rescount = data.grandTotalWordCount\r\n                // add to article count (deduped)\r\n                if ( bookCountArticleTotalsPreOpt.has(bkid) ) {\r\n                    bookCountArticleTotalsPreOpt.set(bkid, bookCountArticleTotalsPreOpt.get(bkid) + rescount);\r\n                } else {\r\n                    bookCountArticleTotalsPreOpt.set(bkid,rescount)\r\n                }\r\n            };\r\n            if ( bookCountTotalsPreOpt.has(bkid) ) {\r\n                bookCountTotalsPreOpt.set(bkid, bookCountTotalsPreOpt.get(bkid) + rescount);\r\n            } else {\r\n                bookCountTotalsPreOpt.set(bkid,rescount);\r\n            }\r\n        }    \r\n    }\r\n\r\n    /*\r\n        For the books marked as done, compute their word count contribution by:\r\n        a. create a deduped list of all articles (UTA and UTW) with their counts\r\n        b. compute the grand total of the articles\r\n        c. Add to that the total word counts for UTQ, UTN, ULT, and UST\r\n        d. This sum total will be the starting point for the book package flow.\r\n    */\r\n    let doneGrandTotal = 0;\r\n    let doneArticleMap = new Map<string,number>();\r\n    for (let i=0; i < booksDone.length; i++) {\r\n        // get the UTA articles and their counts\r\n        let bkid = books.bookIdByTitle(booksDone[i]);\r\n        if ( bkid === 'obs' ) continue; // not used in OBS\r\n        let dbkey = \"uta-\"+bkid;\r\n        let data = await dbsetup.bpstore.getItem(dbkey);\r\n        let dam = data.detail_article_map;\r\n        let articles = Object.keys(dam);\r\n        for (let j=0; j< articles.length; j++) {\r\n            let articleCount = dam[articles[j]].total;\r\n            // now add to map. dups expected\r\n            if ( ! doneArticleMap.has(articles[j])) {\r\n                doneArticleMap.set(articles[j], articleCount);\r\n                //console.log(articles[j], articleCount);\r\n            }\r\n        }\r\n\r\n        // get the UTW articles and their counts\r\n        dbkey = \"utw-\"+bkid;\r\n        data = await dbsetup.bpstore.getItem(dbkey);\r\n        dam = data.detail_article_map;\r\n        articles = Object.keys(dam);\r\n        for (let j=0; j< articles.length; j++) {\r\n            let articleCount = dam[articles[j]].total;\r\n            // now add to map. dups expected\r\n            if ( ! doneArticleMap.has(articles[j])) {\r\n                doneArticleMap.set(articles[j], articleCount);\r\n                //console.log(articles[j], articleCount);\r\n            }\r\n        }\r\n    }\r\n\r\n    // add up the article contributions\r\n    for ( let c of doneArticleMap.values() ) {\r\n        doneGrandTotal = doneGrandTotal + c;\r\n    }\r\n    console.log(\"done article total is:\", doneGrandTotal);\r\n\r\n    // now add in the UTQ, UTN, ULT, UST for each completed book\r\n    for (let i=0; i < booksDone.length; i++) {\r\n        // get the UTA articles and their counts\r\n        let bkid = books.bookIdByTitle(booksDone[i]);\r\n        let dbkey = \"utq-\"+bkid;\r\n        let data  = await dbsetup.bpstore.getItem(dbkey);\r\n        let resourceTotal = data.total;\r\n        doneGrandTotal = doneGrandTotal + resourceTotal;\r\n        dbkey = \"utn-\"+bkid;\r\n        data  = await dbsetup.bpstore.getItem(dbkey);\r\n        resourceTotal = data.total;\r\n        doneGrandTotal = doneGrandTotal + resourceTotal;\r\n        if ( bkid !== 'obs') {\r\n            dbkey = \"ult-\"+bkid;\r\n            data  = await dbsetup.bpstore.getItem(dbkey);\r\n            resourceTotal = data.total;\r\n            doneGrandTotal = doneGrandTotal + resourceTotal;\r\n            dbkey = \"ust-\"+bkid;\r\n            data  = await dbsetup.bpstore.getItem(dbkey);\r\n            resourceTotal = data.total;\r\n            doneGrandTotal = doneGrandTotal + resourceTotal;\r\n        }\r\n    }\r\n    console.log(\"Done grand total is:\", doneGrandTotal);\r\n    /*\r\n        The above marks the end of the computation of the books \r\n        marked as done.\r\n    */\r\n   \r\n\r\n    /*\r\n        This is the loop that computes the optimized path.\r\n        Given that there are n books to optimize, then the \r\n        loop only needs to be done n-1 times. At that point, \r\n        only one book is left and it will be the last one.\r\n\r\n        The inner loop will loop thru all the remaining \r\n        books to determine which should be next. This is done\r\n        by computing word counts of all the resources\r\n        associated to the book, but excluding any articles \r\n        (i.e., UTA and UTW) that have already been done.\r\n\r\n        The inner loop will be executed one less each time,\r\n        since the winning book in each round will be removed\r\n        from the array of books to be optimized. In the last\r\n        round, there will be two books left to do.\r\n\r\n    */\r\n    interface ObjectLiteral {\r\n        [key: string]: any;\r\n    }    \r\n    let round:number = 0;\r\n    let optBooks: string[] = [];\r\n    let optCounts: number[] = [];\r\n    let optUtaMap = new Map<string,string[]>();\r\n    let optUtwMap = new Map<string,string[]>();\r\n    let refmapUta: ObjectLiteral = { };\r\n    let refmapUtw: ObjectLiteral = { };\r\n\r\n    for (let n=0; n < booksOpt.length; n++ ) {\r\n        round++;\r\n        console.log(\"Begin round:\",round);\r\n        let newBooks: string[] = [];\r\n        let newCounts: number[] = [];\r\n        for (let i=0; i < booksOpt.length; i++) {\r\n            // skip winners from prior rounds\r\n            if ( optBooks.includes(booksOpt[i]) ) {\r\n                continue;\r\n            }\r\n            // The book for this round:\r\n            newBooks.push(booksOpt[i]);\r\n            // get the UTA articles and their counts\r\n            let articles: string[] = [];\r\n            let dbkey = \"\";\r\n            let data: ObjectLiteral = {};\r\n            let dam: ObjectLiteral = {};\r\n            let optArticleMap = new Map<string,number>();\r\n            let bkid = books.bookIdByTitle(booksOpt[i]);\r\n            if ( bkid !== 'obs' ) {\r\n                let dbkey = \"uta-\"+bkid;\r\n                let data = await dbsetup.bpstore.getItem(dbkey);\r\n                let dam = data.detail_article_map;\r\n                articles = Object.keys(dam);\r\n\r\n                // dedup the articles for this book\r\n                // using the article map below\r\n\r\n                for (let j=0; j< articles.length; j++) {\r\n                    // first check to see if this article is in the done list\r\n                    // if so skip it\r\n                    if ( doneArticleMap.has(articles[j]) ) { continue;}\r\n                    let articleCount = dam[articles[j]].total;\r\n                    // now add to map. dups expected\r\n                    optArticleMap.set(articles[j], articleCount);\r\n                    //console.log(articles[j], articleCount);\r\n                }\r\n            }\r\n\r\n            // get the UTW articles and their counts\r\n            dbkey = \"utw-\"+bkid;\r\n            data = await dbsetup.bpstore.getItem(dbkey);\r\n            dam = data.detail_article_map;\r\n            articles = Object.keys(dam);\r\n\r\n            for (let j=0; j< articles.length; j++) {\r\n                // first check to see if this article is in the done list\r\n                // if so skip it\r\n                if ( doneArticleMap.has(articles[j]) ) { continue;}\r\n                let articleCount = dam[articles[j]].total;\r\n                // now add to map\r\n                optArticleMap.set(articles[j], articleCount);\r\n                //console.log(articles[j], articleCount);\r\n            }\r\n\r\n            // add up the article contributions for this book\r\n            let optBookTotal: number = 0;\r\n            for ( let c of optArticleMap.values() ) {\r\n                optBookTotal = optBookTotal + c;\r\n            }\r\n            console.log(\"book article total is:\", booksOpt[i],optBookTotal );\r\n\r\n            // now add in the UTQ, UTN, ULT, UST for each completed book\r\n            dbkey = \"utq-\"+bkid;\r\n            data  = await dbsetup.bpstore.getItem(dbkey);\r\n            optBookTotal = optBookTotal + data.total;\r\n            dbkey = \"utn-\"+bkid;\r\n            data  = await dbsetup.bpstore.getItem(dbkey);\r\n            optBookTotal = optBookTotal + data.total;\r\n            if ( bkid !== 'obs' ) {\r\n                dbkey = \"ult-\"+bkid;\r\n                data  = await dbsetup.bpstore.getItem(dbkey);\r\n                optBookTotal = optBookTotal + data.total;\r\n                dbkey = \"ust-\"+bkid;\r\n                data  = await dbsetup.bpstore.getItem(dbkey);\r\n                optBookTotal = optBookTotal + data.total;\r\n            }\r\n            newCounts.push(optBookTotal);\r\n            console.log(\"Book grand total is:\", booksOpt[i], optBookTotal);\r\n        }\r\n\r\n        /*\r\n            Now we decide which book has the least word count!\r\n        */\r\n        // initialize to the first one\r\n        let roundWinnerBook: string = newBooks[0]; \r\n        let roundWinnerCount: number = newCounts[0]; \r\n        for (let i=1; i < newBooks.length; i++) {\r\n            if (newCounts[i] < roundWinnerCount ) {\r\n                roundWinnerBook = newBooks[i];\r\n                roundWinnerCount = newCounts[i];\r\n            }\r\n        }\r\n        // record the winner\r\n        optBooks.push(roundWinnerBook);\r\n        optCounts.push(roundWinnerCount);\r\n        console.log(\"Round \", round, \"winner is \",roundWinnerBook, \" with count:\", roundWinnerCount);\r\n        \r\n        /* ------------------------------------------------------------\r\n\r\n            Now add the winner's UTA and UTW articles to the done list\r\n            these will not be done again in subsequent rounds\r\n\r\n        */\r\n        let bkid = books.bookIdByTitle(roundWinnerBook);\r\n        if ( bkid !== 'obs' ) {\r\n            let dbkey = \"uta-\"+bkid;\r\n            let data = await dbsetup.bpstore.getItem(dbkey);\r\n            let dam = data.detail_article_map;\r\n            refmapUta = data.summary_ref_map;\r\n            let articles = Object.keys(dam);\r\n            let optUta: string[] = [];\r\n\r\n            for (let j=0; j< articles.length; j++) {\r\n                // first check to see if this article is in the done list\r\n                // if so skip it\r\n                if ( doneArticleMap.has(articles[j]) ) { continue;}\r\n                optUta.push(articles[j] );\r\n                let articleCount = dam[articles[j]].total;\r\n                // now add to map. dups expected\r\n                doneArticleMap.set(articles[j], articleCount);\r\n            }\r\n            optUtaMap.set(roundWinnerBook,optUta);\r\n        }\r\n\r\n        // get the UTW articles and their counts\r\n        let dbkey = \"utw-\"+bkid;\r\n        let data = await dbsetup.bpstore.getItem(dbkey);\r\n        let dam = data.detail_article_map;\r\n        refmapUtw = data.summary_ref_map;\r\n        let articles = Object.keys(dam);\r\n        let optUtw: string[] = [];\r\n\r\n        for (let j=0; j< articles.length; j++) {\r\n            // first check to see if this article is in the done list\r\n            // if so skip it\r\n            if ( doneArticleMap.has(articles[j]) ) { continue;}\r\n            optUtw.push(articles[j] );\r\n            let articleCount = dam[articles[j]].total;\r\n            // now add to map\r\n            doneArticleMap.set(articles[j], articleCount);\r\n        }\r\n        optUtwMap.set(roundWinnerBook,optUtw);\r\n    }\r\n    setOpt (\r\n        <div>\r\n            <br/>\r\n            <br/>\r\n            <div>\r\n                <Typography >\r\n                If these book packages are completed:\r\n                </Typography>\r\n                </div>\r\n                <div>\r\n                <ul>\r\n                {booksDone.map(t => (\r\n                    <li>\r\n                        <Typography key={t}>\r\n                            {t} (Book Package Word Count: {bookCountTotalsPreOpt.get(books.bookIdByTitle(t))?.toLocaleString()} )\r\n                        </Typography>\r\n                    </li>\r\n                ))}\r\n                </ul>\r\n            </div>\r\n            <br/>\r\n            <br/>\r\n            <div>\r\n                <Typography >\r\n                Then proceed in this order:\r\n                </Typography>\r\n                <div>\r\n\r\n                <ol>\r\n                {optBooks.map( (t,i) => (\r\n                    <li>\r\n                        <Typography key={t}>\r\n                        {t} - Adjusted Book Package Word Count: {optCounts[i].toLocaleString()}\r\n                        </Typography>\r\n                        <TreeView\r\n                            defaultCollapseIcon={<ExpandMoreIcon />}\r\n                            defaultExpandIcon={<ChevronRightIcon />}\r\n                        >\r\n                            <TreeItem nodeId=\"1\" label='Unique UTA modules'>\r\n                                <ul>\r\n                                {optUtaMap.get(t)?.map( uta => ( \r\n                                    <li>\r\n                                        <Typography>\r\n                                            <Link href={convertUtaToLink(uta)} target=\"_blank\" rel=\"noopener\" >\r\n                                            {uta}\r\n                                            </Link>\r\n                                            &nbsp;&nbsp;(References: {refmapUta[uta]})\r\n                                        </Typography>                    \r\n                                    </li>\r\n                                ))}\r\n                                </ul>\r\n                            </TreeItem>\r\n                        </TreeView>\r\n\r\n                        <TreeView\r\n                            defaultCollapseIcon={<ExpandMoreIcon />}\r\n                            defaultExpandIcon={<ChevronRightIcon />}\r\n                        >\r\n                            <TreeItem nodeId=\"1\" label='Unique UTW modules'>\r\n                                <ul>\r\n                                {optUtwMap.get(t)?.map( utw => ( \r\n                                    <li>\r\n                                    <Typography>\r\n                                        <Link href={convertUtwToLink(utw)} target=\"_blank\" rel=\"noopener\" >\r\n                                        {utw} \r\n                                        </Link>\r\n                                        &nbsp;&nbsp;(References: {refmapUtw[utw]})\r\n                                    </Typography>                    \r\n                                    </li>\r\n                                ))}\r\n                                </ul>\r\n                                </TreeItem>\r\n                        </TreeView>\r\n\r\n                    </li>\r\n                ) )}\r\n                </ol>\r\n                </div>\r\n            </div>\r\n            <br/>\r\n            <br/>\r\n        </div>\r\n    )\r\n}\r\n\r\n","// CSV Package\r\n\r\n\r\nexport function addRow( csvdata: string[][], csvrow: string[]) {\r\n    // Rules below are a relaxed version of \r\n    // https://tools.ietf.org/html/rfc4180 \r\n    // Specifically, no checks are made to ensure that all rows\r\n    // have the same number of columns.\r\n\r\n    // This function add a new row of strings to an existing 2D array.\r\n\r\n    // Rules:\r\n    // 1. if a cell contains a quote, then the quote must doubled (rfc4180#7)\r\n    // 2. if a cell contains commas, quotes, or line breaks, then the string must quoted (rfc4180#6)\r\n    //    a line break will mean a carriage return (CR) or line feed (LF)\r\n\r\n    for (let i=0; i < csvrow.length; i++) {\r\n        let cell = csvrow[i];\r\n        if ( cell.includes('\"') ) {\r\n            // double the quotes\r\n            cell = cell.replace(/\"/g,'\"\"');\r\n        }\r\n        if ( cell.includes('\"') ) {\r\n            cell = '\"' + cell + '\"';\r\n        } else if ( cell.includes('\\n') ) {\r\n            cell = '\"' + cell + '\"';\r\n        } else if ( cell.includes('\\r') ) {\r\n            cell = '\"' + cell + '\"';\r\n        } else if ( cell.includes(',') ) {\r\n            cell = '\"' + cell + '\"';\r\n        }\r\n        // replace value\r\n        csvrow[i] = cell;\r\n    }\r\n    // push new row onto csv data\r\n    csvdata.push(csvrow);\r\n}\r\n\r\nexport function toCSV( csvdata: string[][] ) : string {\r\n    // Rules below are a relaxed version of \r\n    // https://tools.ietf.org/html/rfc4180 \r\n    // Specifically, no checks are made to ensure that all rows\r\n    // have the same number of columns.\r\n\r\n    // This function combines all the rows into a single string\r\n    // suitable for downloading or importing into a spreadsheet\r\n\r\n    // Rules:\r\n    // 1. join cells in a row with a comma (rfc4180#4); \r\n    //    no comma after last cell\r\n    // 2. join rows with a \\r\\n (CRLF) (rfc4180#1)\r\n    //    use CRLF after last row\r\n\r\n\r\n    let data = \"\";\r\n\r\n    for ( let i=0; i < csvdata.length; i++ ) {\r\n        let row = csvdata[i];\r\n        data = data + row.join(',') + '\\r\\n';\r\n    }\r\n    return data;\r\n}","import * as dbsetup from 'book-package-rcl';\r\nimport * as books from './books';\r\nimport * as csv from './csvMaker';\r\n\r\n\r\nexport interface bpStateIF { [x: string]: boolean[]; };\r\nexport interface csvDataIF { [x: string]: string; };\r\n  \r\nconst resourcePrefixes = ['uta-', 'utw-', 'ult-','ust-', 'utq-', 'utn-']\r\n\r\nexport async function exportBookPackage( state: bpStateIF ): Promise<any> {\r\n    // extract the books in the package\r\n    const allbooks = Object.keys(state);\r\n    // extract the book package\r\n    const bookpkg    = allbooks.filter( function(book) { return state[book][0] } );\r\n    console.log(\"bookpkg:\",bookpkg);\r\n    let csvdata: string[][] = [];\r\n\r\n    // count words in each book for summary\r\n    let bookCountTotals = new Map<string,number>();\r\n    let bookCountArticleTotals = new Map<string,number>();\r\n    let bklist: string[] = [];\r\n    for (let bk of bookpkg) {\r\n        let bkid = books.bookIdByTitle(bk);\r\n        bklist.push(bkid);\r\n        for (let res of resourcePrefixes) {\r\n            let dbkey = res+bkid;\r\n            let data = await dbsetup.bpstore.getItem(dbkey);\r\n            let rescount = data.total;\r\n            if ( rescount === undefined ) {\r\n                rescount = data.grandTotalWordCount\r\n                // add to article count (deduped)\r\n                if ( bookCountArticleTotals.has(bkid) ) {\r\n                    bookCountArticleTotals.set(bkid, bookCountArticleTotals.get(bkid) + rescount);\r\n                } else {\r\n                    bookCountArticleTotals.set(bkid,rescount)\r\n                }\r\n            };\r\n            if ( bookCountTotals.has(bkid) ) {\r\n                bookCountTotals.set(bkid, bookCountTotals.get(bkid) + rescount);\r\n            } else {\r\n                bookCountTotals.set(bkid,rescount);\r\n            }\r\n        }    \r\n    }\r\n\r\n    // Add summary to csv data\r\n    let row: string[] = ['Book Package Summary'];\r\n    csv.addRow(csvdata,row);\r\n\r\n    row = ['Book','Word Count'];\r\n    csv.addRow(csvdata,row);\r\n\r\n    for ( let [k,v] of bookCountTotals.entries() ) {\r\n        let n: string = \"\" + v.toLocaleString();\r\n        row = [books.bookTitleById(k),n];\r\n        csv.addRow(csvdata,row);\r\n    }\r\n\r\n    // Add empty row\r\n    csv.addRow(csvdata,[''])\r\n\r\n    // Add details to csv data\r\n    row = ['Book Package Details']\r\n    csv.addRow(csvdata,row);\r\n\r\n    row = ['Resource Type','Book','Word Count']\r\n    csv.addRow(csvdata,row);\r\n\r\n    // get the UTQ, UTN, ULT, UST for each book\r\n    for (let bk of bookpkg) {\r\n        let bkid = books.bookIdByTitle(bk);\r\n\r\n        let dbkey = \"utq-\"+bkid;\r\n        let data  = await dbsetup.bpstore.getItem(dbkey);\r\n        row = ['UTQ',bk,data.total.toLocaleString()];\r\n        csv.addRow(csvdata,row);\r\n\r\n        dbkey = \"utn-\"+bkid;\r\n        data  = await dbsetup.bpstore.getItem(dbkey);\r\n        row = ['UTN',bk,data.total.toLocaleString()];\r\n        csv.addRow(csvdata,row);\r\n\r\n        dbkey = \"ult-\"+bkid;\r\n        data  = await dbsetup.bpstore.getItem(dbkey);\r\n        row = ['ULT',bk,data.total.toLocaleString()];\r\n        csv.addRow(csvdata,row);\r\n\r\n        dbkey = \"ust-\"+bkid;\r\n        data  = await dbsetup.bpstore.getItem(dbkey);\r\n        row = ['UST',bk,data.total.toLocaleString()];\r\n        csv.addRow(csvdata,row);\r\n    }\r\n\r\n    // Add empty row\r\n    csv.addRow(csvdata,[''])\r\n\r\n    row = ['Resource Type','Book','Article','Word Count']\r\n    csv.addRow(csvdata,row);\r\n\r\n    // get the UTA and UTW for book package\r\n    for (let bk of bookpkg) {\r\n        let bkid = books.bookIdByTitle(bk);\r\n\r\n        let dbkey = \"uta-\"+bkid;\r\n        let data = await dbsetup.bpstore.getItem(dbkey);\r\n        let dam = data.detail_article_map;\r\n        let articles = Object.keys(dam);\r\n        for (let j=0; j< articles.length; j++) {\r\n            let articleCount = dam[articles[j]].total;\r\n            row = ['UTA',bk,articles[j],articleCount.toLocaleString()];\r\n            csv.addRow(csvdata,row);\r\n        }\r\n\r\n        // get the UTW articles and their counts\r\n        dbkey = \"utw-\"+bkid;\r\n        data = await dbsetup.bpstore.getItem(dbkey);\r\n        dam = data.detail_article_map;\r\n        articles = Object.keys(dam);\r\n        for (let j=0; j< articles.length; j++) {\r\n            let articleCount = dam[articles[j]].total;\r\n            row = ['UTW',bk,articles[j],articleCount.toLocaleString()];\r\n            csv.addRow(csvdata,row);\r\n        }\r\n    }\r\n\r\n    // Add empty row\r\n    csv.addRow(csvdata,[''])\r\n\r\n    // Get list of errors, if any\r\n    row = ['Book Package Errors']\r\n    csv.addRow(csvdata,row);\r\n\r\n    const sufkey = '-errors';\r\n    for (let bk of bookpkg) {\r\n        let bkid = books.bookIdByTitle(bk);\r\n        for (let res of resourcePrefixes) {\r\n            let dbkey = res+bkid+sufkey;\r\n            let data: string[]  = await dbsetup.bpstore.getItem(dbkey);\r\n            if ( data === null ) { continue }\r\n            let dedupList: string[] = [...new Set(data)]\r\n            for ( let i=0; i < dedupList.length; i++ ) {\r\n                row = [dedupList[i]]\r\n                csv.addRow(csvdata,row);\r\n            }\r\n        }\r\n    }\r\n\r\n    // Download the CSV data\r\n    // -- first, convert 2d array to CSV string\r\n    let csvDownload = csv.toCSV(csvdata);\r\n    return csvDownload;\r\n\r\n\r\n}\r\n","import * as dbsetup from 'book-package-rcl';\r\nimport * as books from './books';\r\nimport * as csv from './csvMaker';\r\n\r\n/*\r\n    This export is per issue 15. The columns needed are:\r\n    book,ult,ust,utn,utq,utw,uta\r\n\r\n    where book is the id and the values are the (total) count\r\n    per the resource type.\r\n\r\n*/\r\n\r\nexport interface bpStateIF { [x: string]: boolean[]; };\r\nexport interface csvDataIF { [x: string]: string; };\r\n  \r\nexport async function exportCounts( state: bpStateIF ): Promise<any> {\r\n    // extract the books in the package\r\n    const allbooks = Object.keys(state);\r\n    // extract the book package\r\n    const bookpkg = allbooks.filter( function(book) { return state[book][0] } );\r\n    console.log(\"bookpkg:\",bookpkg);\r\n    let csvdata: string[][] = [];\r\n    let row = ['book','ult','ust','utn','utq','utw','uta'];\r\n    csv.addRow(csvdata,row);\r\n\r\n    let ult = \"\";\r\n    let ust = \"\";\r\n    let utn = \"\";\r\n    let utq = \"\";\r\n    let utw = \"\";\r\n    let uta = \"\";\r\nfor (let bk of bookpkg) {\r\n        let bkid = books.bookIdByTitle(bk);\r\n        // define vars for the columns vals\r\n\r\n        // get the count for the book resources\r\n        let dbkey = \"ult-\" + bkid;\r\n        let data = await dbsetup.bpstore.getItem(dbkey);\r\n        let rescount = data.total;\r\n        ult = rescount.toLocaleString();\r\n\r\n        // get the count for the book resources\r\n        dbkey = \"ust-\" + bkid;\r\n        data = await dbsetup.bpstore.getItem(dbkey);\r\n        rescount = data.total;\r\n        ust = rescount.toLocaleString();\r\n\r\n        // get the count for the book resources\r\n        dbkey = \"utn-\" + bkid;\r\n        data = await dbsetup.bpstore.getItem(dbkey);\r\n        rescount = data.total;\r\n        utn = rescount.toLocaleString();\r\n\r\n        // get the count for the book resources\r\n        dbkey = \"utq-\" + bkid;\r\n        data = await dbsetup.bpstore.getItem(dbkey);\r\n        rescount = data.total;\r\n        utq = rescount.toLocaleString();\r\n\r\n        // get the count for the book resources\r\n        dbkey = \"utw-\" + bkid;\r\n        data = await dbsetup.bpstore.getItem(dbkey);\r\n        rescount = data.grandTotalWordCount; // note diff!\r\n        utw = rescount.toLocaleString();\r\n\r\n        // get the count for the book resources\r\n        dbkey = \"uta-\" + bkid;\r\n        data = await dbsetup.bpstore.getItem(dbkey);\r\n        rescount = data.grandTotalWordCount; // note diff!\r\n        uta = rescount.toLocaleString();\r\n\r\n        row = [bkid,ult,ust,utn,utq,utw,uta];\r\n        csv.addRow(csvdata,row);\r\n    }\r\n\r\n\r\n    // Download the CSV data\r\n    // -- first, convert 2d array to CSV string\r\n    let csvDownload = csv.toCSV(csvdata);\r\n    return csvDownload;\r\n}\r\n","import React from 'react';\nimport clsx from 'clsx';\nimport { withStyles, makeStyles, useTheme, Theme, createStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport Popover from '@material-ui/core/Popover';\n\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Drawer from '@material-ui/core/Drawer';\nimport Divider from '@material-ui/core/Divider';\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\n\nimport Switch from '@material-ui/core/Switch';\n\nimport { green } from '@material-ui/core/colors';\nimport {BookPackageRollup} from 'book-package-rcl';\nimport * as books from '../src/core/books';\nimport * as opt from '../src/core/optimize';\nimport * as csv from '../src/core/exportBookPackage';\nimport * as exp from '../src/core/export';\nimport { Container, CssBaseline, Grid } from '@material-ui/core';\n\nimport * as dbsetup from 'book-package-rcl';\n\nfunction download(filename: string, text: string) {\n    let element = document.createElement('a');\n    element.setAttribute('href', 'data:text/csv;charset=utf-8,' + encodeURIComponent(text));\n    element.setAttribute('download', filename);\n\n    element.style.display = 'none';\n    document.body.appendChild(element);\n\n    element.click();\n\n    document.body.removeChild(element);\n}\n\nconst drawerWidth = 240;\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%',\n      flexGrow: 1,\n      display: 'flex',\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    appBar: {\n      transition: theme.transitions.create(['margin', 'width'], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n    },\n    appBarShift: {\n      width: `calc(100% - ${drawerWidth}px)`,\n      marginLeft: drawerWidth,\n      transition: theme.transitions.create(['margin', 'width'], {\n        easing: theme.transitions.easing.easeOut,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n    },\n    title: {\n      flexGrow: 1,\n    },\n    formControl: {\n      margin: theme.spacing(3),\n    },\n    button: {\n      marginRight: theme.spacing(1),\n    },\n    instructions: {\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(1),\n    },\n    hide: {\n      display: 'none',\n    },\n    drawer: {\n      width: drawerWidth,\n      flexShrink: 0,\n    },\n    drawerPaper: {\n      width: drawerWidth,\n    },\n    drawerHeader: {\n      display: 'flex',\n      alignItems: 'center',\n      padding: theme.spacing(0, 1),\n      ...theme.mixins.toolbar,\n      justifyContent: 'flex-end',\n    },\n    content: {\n      flexGrow: 1,\n      padding: theme.spacing(3),\n      transition: theme.transitions.create('margin', {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen,\n      }),\n      marginLeft: -drawerWidth,\n    },\n    contentShift: {\n      transition: theme.transitions.create('margin', {\n        easing: theme.transitions.easing.easeOut,\n        duration: theme.transitions.duration.enteringScreen,\n      }),\n      marginLeft: 0,\n    },\n    alignItemsAndJustifyContent: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n    },  \n    offset: {...theme.mixins.toolbar},\n  }),\n);\n\nconst GreenCheckbox = withStyles({\n  root: {\n    color: green[400],\n    '&$checked': {\n      color: green[600],\n    },\n  },\n  checked: {},\n})((props: CheckboxProps) => <Checkbox color=\"default\" {...props} />);\n\nfunction joinBookIds(state: opt.bpStateIF ) {\n  const x = Object.keys(state);\n  let y: string[] = [];\n  for (let i=0; i<x.length; i++) {\n    if ( state[x[i]][0] ) {\n      y.push(books.bookIdByTitle(x[i]));\n    }\n  }\n  return y.join();\n}\n  \n    \nfunction getSteps() {\n  return ['Select Books', 'Book Package Details', 'Configure Book Package Flow', 'Optimized Flow'];\n}\n\nfunction getStepContent(step: number) {\n  switch (step) {\n    case 0:\n      return 'Select books, then click Next to generate book package details';\n    case 1:\n      return 'Click Next to configure book book package flow optimization';\n    case 2:\n      return 'Select any books completed, then click Next to optimize book package flow';\n    case 3:\n      return 'Optimized Book Package Flow';\n    default:\n      return 'Unknown step';\n  }\n}\n\n// A custom hook that builds on useLocation to parse\n// the query string for you.\nlet queryProcessedOnce = false;\nfunction useQuery() {\n  let search = window.location.search;\n  //console.log(\"url=\",window.location.origin,window.location.pathname)\n  return new URLSearchParams(search);\n}\n\nexport default function App() {\n  const [state, setState] = React.useState({ ...books.titlesToBoolean() }); \n  const [activeStep, setActiveStep] = React.useState(0);\n  const [skipped, setSkipped] = React.useState(new Set<number>());\n  \n  /* ----------------------------------------------------------\n      Stepper\n  */\n  const steps = getSteps();\n\n  const isStepOptional = (step: number) => {\n    return false;\n  };\n\n  const isStepSkipped = (step: number) => {\n    return skipped.has(step);\n  };\n\n\n  const handleBack = () => {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n  };\n\n  const handleSkip = () => {\n    if (!isStepOptional(activeStep)) {\n      // You probably want to guard against something like this,\n      // it should never occur unless someone's actively trying to break something.\n      throw new Error(\"You can't skip a step that isn't optional.\");\n    }\n\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n    setSkipped(prevSkipped => {\n      const newSkipped = new Set(prevSkipped.values());\n      newSkipped.add(activeStep);\n      return newSkipped;\n    });\n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n    let states = Object.keys(state);\n    for( let i=0; i < states.length; i++) {\n      state[states[i]][0] = false;\n      state[states[i]][1] = false;\n    }\n  };\n\n  const handleNext = () => {\n    let newSkipped = skipped;\n    if (isStepSkipped(activeStep)) {\n      newSkipped = new Set(newSkipped.values());\n      newSkipped.delete(activeStep);\n    }\n\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n    setSkipped(newSkipped);\n  };\n\n  let query = useQuery();\n  if ( activeStep === 0 && queryProcessedOnce === false ) {\n    queryProcessedOnce = true;\n    let bks   = query.get(\"books\");\n    if ( bks !== null ) {\n      // user has launched the app with URL query parameters\n      let barrayIds = bks.split(',');\n      let barrayTitles: string[] = [];\n      for ( let i=0; i < barrayIds.length; i++ ) {\n        let x = books.bookTitleById(barrayIds[i]);\n        if ( x === \"\" ) {\n          alert(\"Invalid Book Id:\"+barrayIds[i]);\n          break;\n        }\n        barrayTitles.push(x);\n      }\n      for( let i=0; i < barrayTitles.length; i++) {\n        let name = barrayTitles[i];\n        console.log(\"name:\",name)\n        // set the state variables\n        state[name][0] = true;\n        state[name][1] = false;\n        let b: boolean[] = [];\n        b[0] = true;\n        b[1] = false;  \n      }\n      // skip to step 2...\n      //activeStep = 1; //works sort of\n      handleNext();\n      // for URL, always clear local cache\n      dbsetup.bpstore.clear();\n    }\n  }\n\n\n  const classes = useStyles();\n  const theme = useTheme();\n\n  /* ----------------------------------------------------------\n      Popover\n  */\n  const [anchorEl, setAnchorEl] = React.useState<HTMLButtonElement | null>(null);\n\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const popen = Boolean(anchorEl);\n  const id = popen ? 'simple-popover' : undefined;\n\n\n  /* ----------------------------------------------------------\n      Menu drawer\n  */\n  const [open, setOpen] = React.useState(false);\n\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  const handleDrawerClose = () => {\n    setOpen(false);\n  };\n\n\n  async function handleExportDetails() {\n    let data = await csv.exportBookPackage(state);\n    let ts = new Date().toISOString();\n    let fn = 'BookPackageDetails-' + ts + '.csv';\n    download(fn, data);\n  }\n\n  const copyToClipboard = (str: string) => {\n    const el = document.createElement('textarea');\n    el.value = str;\n    el.setAttribute('readonly', '');\n    el.style.position = 'absolute';\n    el.style.left = '-9999px';\n    document.body.appendChild(el);\n    el.select();\n    document.execCommand('copy');\n    document.body.removeChild(el);\n  };\n\n  async function handlePermalink(event: React.MouseEvent<HTMLButtonElement>) {\n    const defBase = \"https://unfoldingword.github.io/book-package-app/\";\n    let states = Object.keys(state);\n    let ids: string[] = [];\n    for( let i=0; i < states.length; i++) {\n      let name = states[i];\n      if ( state[name][0] === true ) {\n        // get the id\n        let id = books.bookIdByTitle(name);\n        ids.push(id);\n      }\n    }\n    // build up the URL\n    const origin   = window.location.origin;\n    const pathname = window.location.pathname;\n    const qstring  = '?books=';\n    let url = origin+pathname+qstring+ids.join(',');\n    if ( origin.startsWith(\"file\") ) {\n      url = defBase+qstring+ids.join(',');\n    }\n    copyToClipboard(url);\n    setAnchorEl(event.currentTarget);\n  }\n//http://localhost:3000/book-package-app/?books=gen,exo\n  async function handleDeleteLocalCache() {\n    dbsetup.bpstore.clear();\n  }\n\n  async function handleExportSummary() {\n    let data = await exp.exportCounts(state);\n    let ts = new Date().toISOString();\n    let fn = 'BookPackageSummary-' + ts + '.csv';\n    download(fn, data);\n  }\n\n  const handleSelectNoneOt = () => {\n    let states = books.oldTestament();\n    for( let i=0; i < states.length; i++) {\n      state[states[i]][0] = false;\n      state[states[i]][1] = false;\n      let name = states[i];\n      let b: boolean[] = [];\n      b[0] = false;\n      b[1] = false;  \n      setState({ ...state, [name]: b });\n    }\n  };\n\n  const handleSelectAllOt = () => {\n    let states = books.oldTestament();\n    for( let i=0; i < states.length; i++) {\n      state[states[i]][0] = true;\n      state[states[i]][1] = false;\n      let name = states[i];\n      let b: boolean[] = [];\n      b[0] = true;\n      b[1] = false;  \n      setState({ ...state, [name]: b });\n    }\n  };\n\n  const handleSelectNoneNt = () => {\n    let states = books.newTestament();\n    for( let i=0; i < states.length; i++) {\n      state[states[i]][0] = false;\n      state[states[i]][1] = false;\n      let name = states[i];\n      let b: boolean[] = [];\n      b[0] = false;\n      b[1] = false;  \n      setState({ ...state, [name]: b });\n    }\n  };\n\n  const handleSelectAllNt = () => {\n    let states = books.newTestament();\n    for( let i=0; i < states.length; i++) {\n      state[states[i]][0] = true;\n      state[states[i]][1] = false;\n      let name = states[i];\n      let b: boolean[] = [];\n      b[0] = true;\n      b[1] = false;  \n      setState({ ...state, [name]: b });\n    }\n  };\n\n  /* ----------------------------------------------------------\n      Switch for data refresh\n  */\n const [clearF, setClearF] = React.useState({\n    clearFlag: false,\n  });\n\n  const handleChangeClearFlag = (name: string) => (event: React.ChangeEvent<HTMLInputElement>) => {\n    setClearF({ ...clearF, [name]: event.target.checked });\n  };\n\n\n  \n  /* ----------------------------------------------------------\n      Form/checkbox stuff \n  */\n  // these are for the initial book seletion\n  const handleChange = (name: string) => (event: React.ChangeEvent<HTMLInputElement>) => {\n    let b: boolean[] = [];\n    b[0] = event.target.checked;\n    b[1] = false;\n    setState({ ...state, [name]: b });\n  };\n\n  const handleFinishedChange = (name: string) => (event: React.ChangeEvent<HTMLInputElement>) => {\n    let b: boolean[] = [];\n    b[0] = true;\n    b[1] = event.target.checked;\n    setState({ ...state, [name]: b });\n  };\n\n  const [_opt, setOpt] = React.useState(<CircularProgress/>);\n  React.useEffect( () => {\n    const fetchData = async () => {\n      try {\n        await opt.optimize(state, setOpt);\n      } catch (error) {\n        setOpt(\n          <div>\n            {error.message}\n          </div>\n        )\n        return;\n      }\n    };\n    if (activeStep !== 3) {return;}\n    fetchData();\n  }, [state,activeStep]); \n  // the parameter [] allows the effect to skip if value unchanged\n  // an empty [] will only update on mount of component\n  \n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar position=\"fixed\" \n          className={clsx(classes.appBar, {[classes.appBarShift]: open })}>\n        <Toolbar>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            onClick={handleDrawerOpen}\n            edge=\"start\"\n            className={clsx(classes.menuButton, open && classes.hide)}\n          >\n            <MenuIcon />\n          </IconButton>\n          <Typography variant=\"h6\" className={classes.title}>\n            Book Package and Flow Optimization\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Drawer\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"left\"\n        open={open}\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n      >\n        <div className={classes.drawerHeader}>\n          <IconButton onClick={handleDrawerClose}>\n            {theme.direction === 'ltr' ? <ChevronLeftIcon /> : <ChevronRightIcon />}\n          </IconButton>\n        </div>\n        <Divider />\n        <FormGroup row>\n            <FormControlLabel\n              control={\n                <Switch checked={clearF.clearFlag} onChange={handleChangeClearFlag('clearFlag')} value=\"clearFlag\" color=\"primary\" />\n              }\n              label=\"Refresh Book Package Data\"\n            />\n        </FormGroup>\n        <Divider />\n              <Button disabled={activeStep !== 0 } onClick={handleDeleteLocalCache} color=\"primary\" variant=\"contained\" className={classes.button}>\n              Delete Local Cache\n              </Button>\n              <Divider />\n              <Button disabled={activeStep !==1 }   onClick={handleExportDetails} color=\"primary\" variant=\"contained\" className={classes.button}>\n              Export Snapshot\n              </Button>\n              <Divider />\n              <Button disabled={activeStep === 0 } aria-describedby={id}  \n                onClick={handlePermalink} color=\"primary\" variant=\"contained\" className={classes.button}\n              >\n              Copy Link\n              </Button>\n              <Popover\n                id={id}\n                open={popen}\n                anchorEl={anchorEl}\n                onClose={handleClose}\n                anchorOrigin={{\n                  vertical: 'bottom',\n                  horizontal: 'center',\n                }}\n                transformOrigin={{\n                  vertical: 'top',\n                  horizontal: 'center',\n                }}\n              >\n                <Typography>Link copied to clipboard!</Typography>\n              </Popover>\n      </Drawer> \n      <Paper>\n        <Typography> <br/> <br/> </Typography>\n        <Stepper activeStep={activeStep}>\n          {steps.map((label, index) => {\n            const stepProps: { completed?: boolean } = {};\n            const labelProps: { optional?: React.ReactNode } = {};\n            if (isStepOptional(index)) {\n              labelProps.optional = <Typography variant=\"caption\">Optional</Typography>;\n            }\n            if (isStepSkipped(index)) {\n              stepProps.completed = false;\n            }\n            return (\n              <Step key={label} {...stepProps}>\n                <StepLabel {...labelProps}>{label}</StepLabel>\n              </Step>\n            );\n          })}\n        </Stepper>\n        <Container>\n          <div className={classes.alignItemsAndJustifyContent}>\n          <Typography className={classes.instructions}>{getStepContent(activeStep)}</Typography>\n          </div>\n\n          <div className={classes.alignItemsAndJustifyContent}>\n            <Button disabled={activeStep === 0} onClick={handleBack} color=\"primary\" variant=\"contained\" className={classes.button}>\n              Back\n            </Button>\n\n            {isStepOptional(activeStep) && (\n              <Button variant=\"contained\" color=\"primary\" onClick={handleSkip} className={classes.button}>\n                Skip\n              </Button>\n            )}\n\n            <Button disabled={activeStep === 3} variant=\"contained\" color=\"primary\" onClick={handleNext} className={classes.button}>\n              Next\n            </Button>\n\n            {activeStep === 1 && (\n              <Button onClick={handleExportSummary} color=\"primary\" variant=\"contained\" className={classes.button}>\n              Export\n              </Button>\n            )}\n\n            {activeStep === 3 && (\n              <Button onClick={handleReset} color=\"primary\" variant=\"contained\" className={classes.button}>\n              Start Over\n              </Button>\n            )}\n          </div>\n\n          <div className={classes.alignItemsAndJustifyContent}>\n            {(activeStep === 0) && (\n              <Grid container spacing={3}>\n                <Grid item xs={5}>\n                  <Paper>\n                    <Typography> <br/> </Typography>\n                    <div>\n                    <Button onClick={handleSelectAllOt} color=\"primary\" variant=\"contained\" className={classes.button}>\n                      Select All\n                    </Button>\n                    <Button onClick={handleSelectNoneOt} color=\"primary\" variant=\"contained\" className={classes.button}>\n                      Select None\n                    </Button>\n                    </div>\n                    <FormControl required component=\"fieldset\" className={classes.formControl}>\n                    <FormLabel component=\"legend\">Old Testament</FormLabel>\n                    <FormGroup>\n                      {books.oldTestament().map(t => \n                        <FormControlLabel\n                          control={<Checkbox checked={state[t][0]} onChange={handleChange(t)} value={t} />}\n                          label={t} key={t}\n                        />\n                      )}                \n                    </FormGroup>\n                    <FormHelperText />\n                    </FormControl>\n                  </Paper>\n                </Grid>\n                <Grid item xs={2}>\n                <Typography> <br/> <br/> <br/> </Typography>\n                  <Paper>\n                  <FormControl required component=\"fieldset\" className={classes.formControl}>\n                    <FormGroup>\n                        <FormControlLabel\n                          control={\n                            <Checkbox checked={state['Open Bible Stories'][0]} \n                              onChange={handleChange('Open Bible Stories')} \n                              value='Open Bible Stories' />\n                          }\n                          label='Open Bible Stories' key='Open Bible Stories'\n                        />\n                    </FormGroup>\n                    <FormHelperText />\n                    </FormControl>\n                  </Paper>\n                </Grid>\n                <Grid item xs={5}>\n                  <Paper>\n                    <Typography> <br/> </Typography>\n                    <div>\n                    <Button onClick={handleSelectAllNt} color=\"primary\" variant=\"contained\" className={classes.button}>\n                      Select All\n                    </Button>\n                    <Button onClick={handleSelectNoneNt} color=\"primary\" variant=\"contained\" className={classes.button}>\n                      Select None\n                    </Button>\n                    </div>\n\n                    <FormControl required component=\"fieldset\" className={classes.formControl}>\n                    <FormLabel component=\"legend\">New Testament</FormLabel>\n                    <FormGroup>\n                      {books.newTestament().map(t => \n                        <FormControlLabel\n                          control={<Checkbox checked={state[t][0]} onChange={handleChange(t)} value={t} />}\n                          label={t} key={t}\n                        />\n                      )}                \n                    </FormGroup>\n                    <FormHelperText />\n                    </FormControl>\n                  </Paper>\n                </Grid>\n              </Grid>\n            )}\n\n\n            {(activeStep === 1) && (\n              <div>\n                <Paper>\n                  <BookPackageRollup bookId={joinBookIds(state)} chapter='' clearFlag={clearF.clearFlag} />\n                </Paper>\n              </div>\n            )}\n\n\n            {(activeStep === 2 ) && (\n              <Paper>\n                <FormControl required component=\"fieldset\" className={classes.formControl}>\n                <FormLabel component=\"legend\">Select one or more</FormLabel>\n                <FormGroup>\n                  <div>\n                    {Object.keys(state)\n                      .filter(function(book) {\n                        return state[book][0];\n                      }).map(t => (\n                        <FormControlLabel\n                        control={<GreenCheckbox checked={state[t][1]} onChange={handleFinishedChange(t)} value={t} key={t} />}\n                        label={t}\n                      />\n                    ))}\n                  </div>                \n                </FormGroup>\n                <FormHelperText />\n                </FormControl>\n              </Paper>\n            )}\n\n            {(activeStep === 3) && (\n              <Paper>\n                {_opt}\n              </Paper>\n            )}\n          </div>\n        </Container>\n      </Paper>\n    </div>\n  );\n}\n\n/*\nhttp://localhost:3000/book-package-app/?books=mat,mrk,luk,jhn,act,rom,1co,2co,gal,eph,php,col,1th,2th,1ti,2ti,tit,phm,heb,jas,1pe,2pe,1jn,2jn,3jn,jud,rev\n\n\n\n\n*/\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}