{"version":3,"sources":["core/books.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["bookDataTitles","list","i","data","length","push","title","titlesToBoolean","ob","forEach","v","k","bookIdByTitle","id","useStyles","makeStyles","theme","createStyles","root","width","formControl","margin","spacing","button","marginRight","instructions","marginTop","marginBottom","GreenCheckbox","withStyles","color","green","checked","props","Checkbox","joinBookIds","state","x","Object","keys","y","books","join","Boolean","window","location","hostname","match","ReactDOM","render","classes","React","useState","activeStep","setActiveStep","Set","skipped","setSkipped","steps","isStepSkipped","step","has","handleReset","setState","className","Stepper","map","label","index","stepProps","labelProps","completed","Step","key","StepLabel","Typography","Button","onClick","getStepContent","FormControl","required","component","FormLabel","FormGroup","filter","book","t","FormControlLabel","control","onChange","name","event","b","target","value","FormHelperText","disabled","prevActiveStep","variant","newSkipped","values","delete","Paper","bookId","chapter","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cc053d54.chunk.js","sourcesContent":["import data from './books.json';\r\n\r\nexport interface bookDataIF {\r\n  \"id\": string;\r\n  \"title\": string;\r\n  \"usfm\": string;\r\n  \"testament\": string;\r\n  \"verseCount\": number;\r\n  \"chapters\": number[];\r\n}\r\n\r\nexport const chaptersInBook = (bookId: string) => {\r\n    let chapters: number[];\r\n    chapters = bookData(bookId).chapters;\r\n    if ( chapters === undefined ) {\r\n      throw new Error(\"Error: chaptersInBook(): Invalid bookId\");\r\n    }\r\n    return chapters;\r\n};\r\n\r\nexport const versesInChapter = (bookId: string, chapter: number) => {\r\n  const verses = chaptersInBook(bookId)[chapter - 1];\r\n  return verses;\r\n};\r\n\r\nexport const bookData = (bookId: string) => {\r\n  const _bookData: bookDataIF = data.filter(row => row.id === bookId)[0];\r\n  return _bookData;\r\n};\r\n\r\nexport const testament = (bookId: string) => {\r\n  const _testament = bookData(bookId).testament;\r\n  return _testament;\r\n};\r\n\r\nexport const bookDataTitles = () => {\r\n  let list: string[] = [];\r\n  for (let i=0; i < data.length; i++) {\r\n      list.push( data[i].title )\r\n  }\r\n  return list;\r\n}\r\n\r\nexport const titlesToBoolean = () => {\r\n  let ob: {[title: string]: boolean[] } = {};\r\n  let list = bookDataTitles();\r\n  list.forEach((v,k) => {ob[v]= [false,false]});\r\n  return ob;\r\n}\r\n\r\nexport const bookIdByTitle = (title: string) => {\r\n  for (let i=0; i < data.length; i++) {\r\n    if ( data[i].title === title ) {\r\n      return data[i].id;\r\n    }\r\n  }\r\n  return \"\";\r\n}","import React from 'react';\nimport { withStyles, makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Checkbox, { CheckboxProps } from '@material-ui/core/Checkbox';\n\nimport { green } from '@material-ui/core/colors';\nimport {BookPackageRollup} from 'book-package-rcl';\nimport * as books from '../src/core/books';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%',\n    },\n    formControl: {\n      margin: theme.spacing(3),\n    },\n    button: {\n      marginRight: theme.spacing(1),\n    },\n    instructions: {\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(1),\n    },\n  }),\n);\n\nconst GreenCheckbox = withStyles({\n  root: {\n    color: green[400],\n    '&$checked': {\n      color: green[600],\n    },\n  },\n  checked: {},\n})((props: CheckboxProps) => <Checkbox color=\"default\" {...props} />);\n\nfunction joinBookIds(state: { [x: string]: boolean[] } ) {\n  const x = Object.keys(state);\n  let y: string[] = [];\n  for (let i=0; i<x.length; i++) {\n    if ( state[x[i]][0] ) {\n      y.push(books.bookIdByTitle(x[i]));\n    }\n  }\n  return y.join();\n}\n  \n    \nfunction getSteps() {\n  return ['Select Books', 'Book Package Results', 'Optimized Flow'];\n}\n\nfunction getStepContent(step: number) {\n  switch (step) {\n    case 0:\n      return 'Select books, then click Next to generate book package results';\n    case 1:\n      return 'Select any books completed, then click Next to optimize book package flow';\n    case 2:\n      return 'Finished';\n    default:\n      return 'Unknown step';\n  }\n}\n\nexport default function HorizontalLinearStepper() {\n  const classes = useStyles();\n  const [activeStep, setActiveStep] = React.useState(0);\n  const [skipped, setSkipped] = React.useState(new Set<number>());\n  const steps = getSteps();\n\n  const isStepOptional = (step: number) => {\n    return false;\n  };\n\n  const isStepSkipped = (step: number) => {\n    return skipped.has(step);\n  };\n\n  const handleNext = () => {\n    let newSkipped = skipped;\n    if (isStepSkipped(activeStep)) {\n      newSkipped = new Set(newSkipped.values());\n      newSkipped.delete(activeStep);\n    }\n\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n    setSkipped(newSkipped);\n  };\n\n  const handleBack = () => {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n  };\n\n  const handleSkip = () => {\n    if (!isStepOptional(activeStep)) {\n      // You probably want to guard against something like this,\n      // it should never occur unless someone's actively trying to break something.\n      throw new Error(\"You can't skip a step that isn't optional.\");\n    }\n\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n    setSkipped(prevSkipped => {\n      const newSkipped = new Set(prevSkipped.values());\n      newSkipped.add(activeStep);\n      return newSkipped;\n    });\n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n  };\n\n  /* Form/checkbox stuff */\n\n  // these are for the initial book seletion\n  const [state, setState] = React.useState({ ...books.titlesToBoolean() }); \n  const handleChange = (name: string) => (event: React.ChangeEvent<HTMLInputElement>) => {\n    let b: boolean[] = [];\n    b[0] = event.target.checked;\n    b[1] = false;\n    setState({ ...state, [name]: b });\n  };\n\n  const handleFinishedChange = (name: string) => (event: React.ChangeEvent<HTMLInputElement>) => {\n    let b: boolean[] = [];\n    b[0] = true;\n    b[1] = event.target.checked;\n    setState({ ...state, [name]: b });\n  };\n\n  return (\n    <div className={classes.root}>\n      <Stepper activeStep={activeStep}>\n        {steps.map((label, index) => {\n          const stepProps: { completed?: boolean } = {};\n          const labelProps: { optional?: React.ReactNode } = {};\n          if (isStepOptional(index)) {\n            labelProps.optional = <Typography variant=\"caption\">Optional</Typography>;\n          }\n          if (isStepSkipped(index)) {\n            stepProps.completed = false;\n          }\n          return (\n            <Step key={label} {...stepProps}>\n              <StepLabel {...labelProps}>{label}</StepLabel>\n            </Step>\n          );\n        })}\n      </Stepper>\n      <div>\n        {activeStep === steps.length ? (\n          <div>\n            <Typography className={classes.instructions}>\n              Optimized Book Package Flow\n            </Typography>\n            <Button onClick={handleReset} className={classes.button}>\n              Reset\n            </Button>\n          </div>\n        ) : (\n          <div>\n            <Typography className={classes.instructions}>{getStepContent(activeStep)}</Typography>\n            {(activeStep === 1 ) && (\n                <div>\n                  <FormControl required component=\"fieldset\" className={classes.formControl}>\n                  <FormLabel component=\"legend\">Select one or more</FormLabel>\n                  <FormGroup>\n                    <div>\n                      {Object.keys(state)\n                        .filter(function(book) {\n                          return state[book][0];\n                        }).map(t => (\n                          <FormControlLabel\n                          control={<GreenCheckbox checked={state[t][1]} onChange={handleFinishedChange(t)} value={t} />}\n                          label={t}\n                        />\n                      ))}\n                    </div>                \n                  </FormGroup>\n                  <FormHelperText />\n                  </FormControl>\n                </div>\n              )}\n            <div>\n              <Button disabled={activeStep === 0} onClick={handleBack} color=\"primary\" className={classes.button}>\n                Back\n              </Button>\n              {isStepOptional(activeStep) && (\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={handleSkip}\n                  className={classes.button}\n                >\n                  Skip\n                </Button>\n              )}\n\n              {activeStep < 2 && (\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={handleNext}\n                  className={classes.button}\n                >\n                  Next\n                </Button>\n              )}\n\n              {activeStep === 2 && (\n                <Button onClick={handleReset} color=\"primary\" className={classes.button}>\n                Reset\n                </Button>\n              )}\n\n\n\n              {(activeStep === 0) && (\n                <FormControl required component=\"fieldset\" className={classes.formControl}>\n                <FormLabel component=\"legend\">Select one or more</FormLabel>\n                <FormGroup>\n                  {books.bookDataTitles().map(t => \n                    <FormControlLabel\n                      control={<Checkbox checked={state[t][0]} onChange={handleChange(t)} value={t} />}\n                      label={t}\n                    />\n                  )}                \n                </FormGroup>\n                <FormHelperText />\n                </FormControl>\n              )}\n\n\n              {(activeStep === 1) && (\n                <div>\n                  <Paper>\n                    <BookPackageRollup bookId={joinBookIds(state)} chapter='' />\n                  </Paper>\n                </div>\n              )}\n\n\n              {(activeStep === 2) && (\n                <div>\n                  <div>\n                  <Typography className={classes.instructions}>\n                    Now we *optimize* the Book Package Flow. <br />\n                    The following books will be optimized:\n                  </Typography>\n                  </div>\n                  <div>\n                    {Object.keys(state)\n                        .filter(function(book) {\n                          return state[book][0];\n                        }).map(t => (\n                          <Typography>{t}</Typography>\n                      ))}\n                  </div>\n\n                  <div>\n                  <Typography className={classes.instructions}>\n                    Where the following books may be completed:\n                  </Typography>\n                  </div>\n                  <div>\n                    {Object.keys(state)\n                        .filter(function(book) {\n                          return state[book][1];\n                        }).map(t => (\n                          <Typography>{t}</Typography>\n                      ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n\n\n/* graveyard\n                  <FormGroup>\n                    <div>\n                      {Object.keys(state)\n                        .filter(function(book) {\n                          return state[book];\n                        }).map(t => (\n                          <FormControlLabel\n                          control={<GreenCheckbox checked={state[t]} onChange={handleChange(t)} value={t} />}\n                          label={t}\n                        />\n                      ))}\n                    </div>                \n                  </FormGroup>\n*/","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}