{"version":3,"sources":["core/books.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["bookDataTitles","list","i","data","length","push","title","titlesToBoolean","ob","forEach","v","k","bookIdByTitle","id","useStyles","makeStyles","theme","createStyles","root","width","formControl","margin","spacing","button","marginRight","instructions","marginTop","marginBottom","Boolean","window","location","hostname","match","ReactDOM","render","classes","React","useState","activeStep","setActiveStep","Set","skipped","setSkipped","steps","isStepOptional","step","isStepSkipped","has","books","state","setState","className","Stepper","map","label","index","stepProps","labelProps","optional","Typography","variant","completed","Step","key","StepLabel","Button","onClick","getStepContent","disabled","prevActiveStep","color","Error","prevSkipped","newSkipped","values","add","delete","FormControl","required","component","FormLabel","FormGroup","t","FormControlLabel","control","Checkbox","checked","onChange","name","event","console","log","target","value","FormHelperText","Object","keys","filter","book","Paper","bookId","chapter","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.de259ada.chunk.js","sourcesContent":["import data from './books.json';\r\n\r\nexport interface bookDataIF {\r\n  \"id\": string;\r\n  \"title\": string;\r\n  \"usfm\": string;\r\n  \"testament\": string;\r\n  \"verseCount\": number;\r\n  \"chapters\": number[];\r\n}\r\n\r\nexport const chaptersInBook = (bookId: string) => {\r\n    let chapters: number[];\r\n    chapters = bookData(bookId).chapters;\r\n    if ( chapters === undefined ) {\r\n      throw new Error(\"Error: chaptersInBook(): Invalid bookId\");\r\n    }\r\n    return chapters;\r\n};\r\n\r\nexport const versesInChapter = (bookId: string, chapter: number) => {\r\n  const verses = chaptersInBook(bookId)[chapter - 1];\r\n  return verses;\r\n};\r\n\r\nexport const bookData = (bookId: string) => {\r\n  const _bookData: bookDataIF = data.filter(row => row.id === bookId)[0];\r\n  return _bookData;\r\n};\r\n\r\nexport const testament = (bookId: string) => {\r\n  const _testament = bookData(bookId).testament;\r\n  return _testament;\r\n};\r\n\r\nexport const bookDataTitles = () => {\r\n  let list: string[] = [];\r\n  for (let i=0; i < data.length; i++) {\r\n      list.push( data[i].title )\r\n  }\r\n  return list;\r\n}\r\n\r\nexport const titlesToBoolean = () => {\r\n  let ob: {[title: string]: boolean} = {};\r\n  let list = bookDataTitles();\r\n  list.forEach((v,k) => {ob[v]=false});\r\n  return ob;\r\n}\r\n\r\nexport const bookIdByTitle = (title: string) => {\r\n  for (let i=0; i < data.length; i++) {\r\n    if ( data[i].title === title ) {\r\n      return data[i].id;\r\n    }\r\n  }\r\n}","import React from 'react';\nimport { makeStyles, Theme, createStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport Stepper from '@material-ui/core/Stepper';\nimport Step from '@material-ui/core/Step';\nimport StepLabel from '@material-ui/core/StepLabel';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport Checkbox from '@material-ui/core/Checkbox';\n\nimport {BookPackageRollup} from 'book-package-rcl';\nimport * as books from '../src/core/books';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: '100%',\n    },\n    formControl: {\n      margin: theme.spacing(3),\n    },\n    button: {\n      marginRight: theme.spacing(1),\n    },\n    instructions: {\n      marginTop: theme.spacing(1),\n      marginBottom: theme.spacing(1),\n    },\n  }),\n);\n\nfunction getSteps() {\n  return ['Select Books', 'Book Package Results', 'Optimized Flow'];\n}\n\nfunction getStepContent(step: number) {\n  switch (step) {\n    case 0:\n      return 'Select books to include in package';\n    case 1:\n      return 'Optimize Book Package Flow';\n    case 2:\n      return 'Finished';\n    default:\n      return 'Unknown step';\n  }\n}\n\nexport default function HorizontalLinearStepper() {\n  const classes = useStyles();\n  const [activeStep, setActiveStep] = React.useState(0);\n  const [skipped, setSkipped] = React.useState(new Set<number>());\n  const steps = getSteps();\n\n  const isStepOptional = (step: number) => {\n    return step === 1;\n  };\n\n  const isStepSkipped = (step: number) => {\n    return skipped.has(step);\n  };\n\n  const handleNext = () => {\n    let newSkipped = skipped;\n    if (isStepSkipped(activeStep)) {\n      newSkipped = new Set(newSkipped.values());\n      newSkipped.delete(activeStep);\n    }\n\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n    setSkipped(newSkipped);\n  };\n\n  const handleBack = () => {\n    setActiveStep(prevActiveStep => prevActiveStep - 1);\n  };\n\n  const handleSkip = () => {\n    if (!isStepOptional(activeStep)) {\n      // You probably want to guard against something like this,\n      // it should never occur unless someone's actively trying to break something.\n      throw new Error(\"You can't skip a step that isn't optional.\");\n    }\n\n    setActiveStep(prevActiveStep => prevActiveStep + 1);\n    setSkipped(prevSkipped => {\n      const newSkipped = new Set(prevSkipped.values());\n      newSkipped.add(activeStep);\n      return newSkipped;\n    });\n  };\n\n  const handleReset = () => {\n    setActiveStep(0);\n  };\n\n  /* Form/checkbox stuff */\n  const [state, setState] = React.useState({ ...books.titlesToBoolean() });\n\n  const handleChange = (name: string) => (event: React.ChangeEvent<HTMLInputElement>) => {\n    console.log(\"handleChange():\",name)\n    console.log(\"state is:\",{...state, [name]: event.target.checked})\n    setState({ ...state, [name]: event.target.checked });\n  };\n\n  \n\n  return (\n    <div className={classes.root}>\n      <Stepper activeStep={activeStep}>\n        {steps.map((label, index) => {\n          const stepProps: { completed?: boolean } = {};\n          const labelProps: { optional?: React.ReactNode } = {};\n          if (isStepOptional(index)) {\n            labelProps.optional = <Typography variant=\"caption\">Optional</Typography>;\n          }\n          if (isStepSkipped(index)) {\n            stepProps.completed = false;\n          }\n          return (\n            <Step key={label} {...stepProps}>\n              <StepLabel {...labelProps}>{label}</StepLabel>\n            </Step>\n          );\n        })}\n      </Stepper>\n      <div>\n        {activeStep === steps.length ? (\n          <div>\n            <Typography className={classes.instructions}>\n              All steps completed - you&apos;re finished\n            </Typography>\n            <Button onClick={handleReset} className={classes.button}>\n              Reset\n            </Button>\n          </div>\n        ) : (\n          <div>\n            <Typography className={classes.instructions}>{getStepContent(activeStep)}</Typography>\n            <div>\n              <Button disabled={activeStep === 0} onClick={handleBack} className={classes.button}>\n                Back\n              </Button>\n              {isStepOptional(activeStep) && (\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  onClick={handleSkip}\n                  className={classes.button}\n                >\n                  Skip\n                </Button>\n              )}\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onClick={handleNext}\n                className={classes.button}\n              >\n                {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\n              </Button>\n\n\n              {(activeStep === 0) && (\n                <FormControl required component=\"fieldset\" className={classes.formControl}>\n                <FormLabel component=\"legend\">Select one or more</FormLabel>\n                <FormGroup>\n                  {books.bookDataTitles().map(t => \n                    <FormControlLabel\n                      control={<Checkbox checked={state[t]} onChange={handleChange(t)} value={t} />}\n                      label={t}\n                    />\n                  )}                \n                </FormGroup>\n                <FormHelperText>You can display an error</FormHelperText>\n                </FormControl>\n              )}\n\n\n              {(activeStep === 1) && (\n                Object.keys(state).filter(function(book) {\n                  return state[book];\n                }).map(t => \n                  <div>\n                    <Paper>\n                    <BookPackageRollup bookId={books.bookIdByTitle(t)} chapter='' />\n                    </Paper>\n                  </div>\n                )             \n\n              )}\n\n\n\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}